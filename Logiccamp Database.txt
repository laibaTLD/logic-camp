Logic Camp Database Documentation
1. Overview
Logic Camp database supports:
•	Users
•	Teams
•	Projects (with explicit ownership and file uploads)
•	Goals
•	Tasks (with comments and file attachments)
Users Table
Table Name: users
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key, unique ID for each user
name	VARCHAR(100)	Full name of the user, NOT NULL
email	VARCHAR(150)	Unique, used for login, NOT NULL
password	VARCHAR(255)	Hashed password, NOT NULL
role	ENUM(admin, team_lead, employee)	Defines access level, Default: employee
is_approved	BOOLEAN	Whether admin approved the user, Default: false
notifications	JSON	Stores user notification preferences and history, nullable
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated on modification
Teams Table
Table Name: teams
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key
name	VARCHAR(100)	Unique, NOT NULL
description	TEXT	Nullable
team_lead_id	INT / UUID (FK)	References users(id), must have role 'team_lead' or 'admin'
is_active	BOOLEAN	Default: true, allows soft deletion
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated
Projects Table
Purpose: Tracks all projects in the system. Each project:
•	Belongs to a team
•	Has an owner (Admin or Team Lead who created it)
•	Can have files uploaded during creation
•	Contains goals and tasks
Table Name: projects
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key
name	VARCHAR(150)	NOT NULL
description	TEXT	Nullable
status	ENUM(todo, inProgress, testing, completed, archived)	Default: todo
start_date	DATE	Nullable
end_date	DATE	Nullable
team_id	INT / UUID (FK)	References teams(id), team responsible for the project
owner_id	INT / UUID (FK)	References users(id), the creator (Admin/Team Lead)
files	JSON	Stores project files uploaded by creator, nullable
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated
Ownership Rules
•	Admin can create any project and becomes the owner
•	Team Lead can create projects for their team and becomes the owner
•	Employees cannot create projects
•	owner_id ensures that project ownership is always traceable
Relationships
•	One Project belongs to One Team
•	One Project has One Owner (Admin or Team Lead)
•	One Project has Many Goals
Goals Table
Table Name: goals
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key
title	VARCHAR(150)	NOT NULL
description	TEXT	Nullable
status	ENUM(todo, inProgress, testing, completed)	Default: todo
project_id	INT / UUID (FK)	References projects(id), goal belongs to one project
deadline	DATE	Nullable
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated
Tasks Table
Purpose: Tasks are the smallest unit of work. They belong to a goal and are assigned to team members.
Table Name: tasks
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key
title	VARCHAR(150)	NOT NULL
description	TEXT	Nullable
status	ENUM(todo, inProgress, testing, completed)	Default: todo
deadline	DATE	Nullable
goal_id	INT / UUID (FK)	References goals(id), task belongs to one goal
assigned_to	INT / UUID (FK)	References users(id), user responsible for the task
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated
Relationships
•	One Goal has Many Tasks
•	One User is assigned to Many Tasks (via assigned_to)
Task Comments Table
Purpose: Stores comments and file attachments for tasks, allowing team collaboration.
Table Name: task_comments
Column Name	Data Type	Constraints / Description
id	INT / UUID (PK)	Primary Key
task_id	INT / UUID (FK)	References tasks(id), comment belongs to one task
user_id	INT / UUID (FK)	References users(id), user who made the comment
comment	TEXT	The comment text, nullable
files	JSON	Stores attached files/images, nullable
created_at	TIMESTAMP	Default: current timestamp
updated_at	TIMESTAMP	Auto-updated
Relationships
•	One Task has Many Task Comments
•	One User can create Many Task Comments
Database Constraints and Indexes
Foreign Key Constraints
•	teams.team_lead_id → users.id (ON DELETE SET NULL)
•	projects.team_id → teams.id (ON DELETE CASCADE)
•	projects.owner_id → users.id (ON DELETE SET NULL)
•	goals.project_id → projects.id (ON DELETE CASCADE)
•	tasks.goal_id → goals.id (ON DELETE CASCADE)
•	tasks.assigned_to → users.id (ON DELETE SET NULL)
•	task_comments.task_id → tasks.id (ON DELETE CASCADE)
•	task_comments.user_id → users.id (ON DELETE SET NULL)
Recommended Indexes
•	users: email (unique), role
•	teams: name (unique), team_lead_id
•	projects: name, team_id, owner_id, status
•	goals: project_id, status, deadline
•	tasks: goal_id, assigned_to, status, deadline
•	task_comments: task_id, user_id, created_at
Business Logic Validations
•	team_lead_id in teams table must reference a user with role 'team_lead' or 'admin'
•	owner_id in projects table must reference a user with role 'team_lead' or 'admin'
•	assigned_to in tasks table must reference a user who is part of the project's team
•	end_date in projects must be greater than or equal to start_date when both are provided
•	deadline in goals and tasks should be within the project's date range when specified
•	task_comments must have either comment text or files (at least one should be present)

