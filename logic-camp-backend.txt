Logic Camp Backend Documentation

Overview
The Logic Camp backend provides RESTful APIs to manage:

Users (registration, authentication, roles, approval, notifications)

Teams (creation, membership, leadership)

Projects (ownership by Admin or Team Lead, file uploads, status tracking)

Goals (linked to projects, milestones with deadlines)

Tasks (linked to goals, assigned to users, smallest unit of work)

Task Comments (discussion, file attachments on tasks)

It enforces role-based access (Admin, Team Lead, Employee) and ownership rules as defined in the database documentation.

Authentication and Authorization

JWT-based authentication

On login, a JWT is issued.

Token must be passed in Authorization: Bearer <token> header.

Authorization Rules

Admin: Full access (manage users, teams, projects, goals, tasks)

Team Lead: Manage their team, create and manage projects, goals, tasks under their team

Employee: Can view and join assigned teams, work on assigned tasks, comment

API Endpoints

Users (/api/users)

POST /register: Register new user (default role: employee, is_approved=false)

POST /login: Authenticate user, return JWT

GET / (Admin only): List all users

PATCH /approve/:id (Admin): Approve or reject user

GET /:id: Fetch user details

PATCH /:id: Update user profile

DELETE /:id (Admin): Soft delete user

Teams (/api/teams)

POST / (Admin or Team Lead): Create team, assign team_lead_id

GET /: List all teams

GET /:id: Get team details and members

PATCH /:id (Admin or Team Lead): Update team info

DELETE /:id (Admin): Deactivate team (is_active=false)

Projects (/api/projects)

POST / (Admin or Team Lead): Create project, set owner_id and team_id, allow file uploads

GET /: List all projects with filters (status, team_id, owner_id)

GET /:id: Get project details, goals, tasks

PATCH /:id (Owner or Admin): Update project info or status

DELETE /:id (Admin): Archive project (status=archived)

Ownership Rules

Admin can create and manage all projects

Team Lead can only create and manage projects for their team

Employees cannot create projects

Goals (/api/goals)

POST / (Admin or Team Lead): Create goal under a project

GET /project/:projectId: List all goals for a project

GET /:id: Get goal details

PATCH /:id (Owner or Admin): Update goal status or details

DELETE /:id (Admin or Owner): Delete goal

Tasks (/api/tasks)

POST / (Admin or Team Lead): Create task under a goal, assign to user

GET /goal/:goalId: List tasks for a goal

GET /assigned/:userId: List tasks assigned to a user

GET /:id: Get task details

PATCH /:id (Assigned user, Admin, or Owner): Update task status or details

DELETE /:id (Admin or Owner): Delete task

Task Comments (/api/task-comments)

POST / (Any authenticated user): Add comment or file to task

GET /task/:taskId: List comments for a task

PATCH /:id (Owner or Admin): Edit comment

DELETE /:id (Owner or Admin): Delete comment

Business Logic Validations

User Registration: Email must be unique, default role is employee, needs admin approval before login success

Teams: team_lead_id must be a user with role team_lead or admin

Projects: owner_id must be Admin or Team Lead, end_date must be greater than or equal to start_date

Goals/Tasks: Deadlines must be within project date range

Tasks: assigned_to must belong to the projectâ€™s team

Comments: Must contain at least text or file

File Uploads and Notifications

Files: Stored in JSON fields (projects.files, task_comments.files). Recommended: cloud storage (AWS S3, Cloudinary)

Notifications: Stored in users.notifications. Triggered on new task, comment, approval, or project update

Error Handling

401 Unauthorized: Invalid or missing token

403 Forbidden: User not allowed to perform action

404 Not Found: Entity does not exist

422 Validation Error: Business rules violated

500 Internal Server Error: Unexpected errors

Recommended Tech Stack

Backend Framework: Next.js

Database: PostgreSQL or MySQL

Authentication: JWT and bcrypt for password hashing

File Handling: Multer and cloud storage (AWS S3, Cloudinary)