"use client";

import React, { useState } from "react";
import { 
  Calendar, 
  Clock, 
  CheckCircle, 
  AlertCircle, 
  Zap,
  Trash2,
  Edit,
  FolderKanban,
  ChevronRight,
  MoreVertical
} from "lucide-react";
import StatusDropdown from "@/components/StatusDropdown";
import { StatusItem } from "@/types";

interface Task {
  id: number;
  title: string;
  description?: string;
  status_title?: string;
  status?: string;
  deadline?: string;
  createdAt?: string;
  updatedAt?: string;
  progress?: number;
  owner?: {
    name: string;
    avatar?: string;
  };
}

interface TaskCardProps {
  task: Task;
  index: number;
  onUpdateStatus: (taskId: number, status: string) => void;
  onDeleteTask: (taskId: number) => void;
  className?: string;
}

// Constants
const STATUS_CONFIG = {
  completed: {
    bg: 'from-emerald-500/10 via-green-500/5 to-teal-500/10',
    border: 'border-emerald-500/30',
    text: 'text-emerald-400',
    glow: 'shadow-emerald-500/20',
    icon: CheckCircle
  },
  'in-progress': {
    bg: 'from-blue-500/10 via-cyan-500/5 to-indigo-500/10',
    border: 'border-blue-500/30',
    text: 'text-blue-400',
    glow: 'shadow-blue-500/20',
    icon: Zap
  },
  review: {
    bg: 'from-amber-500/10 via-yellow-500/5 to-orange-500/10',
    border: 'border-amber-500/30',
    text: 'text-amber-400',
    glow: 'shadow-amber-500/20',
    icon: AlertCircle
  },
  testing: {
    bg: 'from-purple-500/10 via-violet-500/5 to-fuchsia-500/10',
    border: 'border-purple-500/30',
    text: 'text-purple-400',
    glow: 'shadow-purple-500/20',
    icon: AlertCircle
  },
  default: {
    bg: 'from-gray-500/10 via-slate-500/5 to-gray-500/10',
    border: 'border-gray-500/30',
    text: 'text-gray-400',
    glow: 'shadow-gray-500/20',
    icon: Clock
  }
} as const;

// Helper functions
const normalizeStatus = (statusTitle?: string): { key: keyof typeof STATUS_CONFIG; label: string } => {
  if (!statusTitle) return { key: 'default', label: 'todo' };
  
  const raw = statusTitle.trim().toLowerCase();
  if (['done', 'completed', 'complete', 'finished'].includes(raw)) return { key: 'completed', label: 'done' };
  if (['doing', 'in-progress', 'in progress', 'progress', 'inprogress'].includes(raw)) return { key: 'in-progress', label: 'doing' };
  if (['review', 'in-review', 'in review'].includes(raw)) return { key: 'review', label: 'review' };
  if (['testing', 'test'].includes(raw)) return { key: 'testing', label: 'testing' };
  if (['todo', 'to-do', 'backlog', 'pending'].includes(raw)) return { key: 'default', label: 'todo' };
  // Fallback
  return { key: (raw as keyof typeof STATUS_CONFIG) in STATUS_CONFIG ? (raw as keyof typeof STATUS_CONFIG) : 'default', label: raw };
};

const getStatusIcon = (status: string) => {
  const config = STATUS_CONFIG[status as keyof typeof STATUS_CONFIG] || STATUS_CONFIG.default;
  const IconComponent = config.icon;
  return <IconComponent className="h-4 w-4" />;
};

const formatDeadlineText = (deadline?: string): string => {
  if (!deadline) return "No deadline";
  
  const today = new Date();
  const deadlineDate = new Date(deadline);
  if (Number.isNaN(deadlineDate.getTime())) return "No deadline";
  
  const diffTime = deadlineDate.getTime() - today.getTime();
  const remainingDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  
  if (remainingDays > 0) return `${remainingDays}d left`;
  if (remainingDays === 0) return "Due today";
  return `${Math.abs(remainingDays)}d overdue`;
};

// Sub-components
const BackgroundEffects: React.FC<{ isHovered: boolean; statusTheme: any }> = ({ 
  isHovered, 
  statusTheme 
}) => (
  <div className={`absolute inset-0 transition-opacity duration-500 ${isHovered ? 'opacity-100' : 'opacity-0'}`}>
    <div className={`absolute inset-0 bg-gradient-to-br ${statusTheme.bg} transition-all duration-700 ${isHovered ? 'scale-105' : 'scale-100'}`}></div>
    <div className={`absolute top-0 left-1/2 -translate-x-1/2 w-96 h-96 bg-gradient-conic from-indigo-500/20 via-purple-500/10 to-cyan-500/20 rounded-full blur-3xl transition-all duration-1000 ${
      isHovered ? 'opacity-30' : 'opacity-0 scale-95'
    }`}></div>
  </div>
);

const StatusBadge: React.FC<{ 
  statusKey: keyof typeof STATUS_CONFIG; 
  statusLabel: string; 
  statusTheme: any; 
  isHovered: boolean; 
}> = ({ statusKey, statusLabel, statusTheme, isHovered }) => {
  if (!statusKey) return null;
  
  const Icon = statusTheme.icon || Clock;
  
  return (
    <div className="absolute top-3 right-3 z-20">
      <div 
        className={`flex items-center gap-1.5 px-2.5 py-1 rounded-lg backdrop-blur-md
          bg-gradient-to-r ${statusTheme.bg} border ${statusTheme.border}
          shadow-lg transition-all duration-300 ${isHovered ? 'scale-105' : 'scale-100'}
          ${isHovered ? statusTheme.glow : ''}`}
      >
        <Icon className={`h-3.5 w-3.5 ${statusTheme.text}`} />
        <span className={`capitalize font-medium text-xs ${statusTheme.text} hidden sm:inline-block`}>
          {statusLabel}
        </span>
      </div>
    </div>
  );
};

const BorderGlowEffect: React.FC<{ isHovered: boolean }> = ({ isHovered }) => (
  <div className={`absolute inset-0 rounded-2xl transition-all duration-500 pointer-events-none
    ${isHovered ? 'opacity-100' : 'opacity-0'}`}>
    <div className="absolute inset-0 rounded-2xl border border-white/10"></div>
    <div className="absolute inset-0 rounded-2xl bg-gradient-to-r from-indigo-500/5 via-transparent to-purple-500/5"></div>
    <div className="absolute inset-0 rounded-2xl bg-gradient-to-br from-white/5 via-transparent to-transparent"></div>
    <div className={`absolute inset-0 rounded-2xl bg-[radial-gradient(circle_at_center,_var(--tw-gradient-stops))] from-blue-500/5 via-transparent to-transparent transition-all duration-700 ${
      isHovered ? 'opacity-100 scale-100' : 'opacity-0 scale-95'}`}></div>
  </div>
);

const TaskHeader: React.FC<{ 
  task: Task; 
  isHovered: boolean; 
}> = ({ task, isHovered }) => (
  <div className="flex items-start gap-3 mb-4">
    {/* Task Icon */}
    <div className={`shrink-0 h-10 w-10 rounded-xl bg-gradient-to-br from-indigo-500 via-purple-600 to-cyan-500 
      grid place-items-center shadow-lg transition-all duration-500 relative overflow-hidden
      ${isHovered ? 'shadow-indigo-500/40 rotate-6 scale-105' : 'shadow-indigo-500/20'}`}>
      <div className="absolute inset-0 bg-gradient-to-tr from-white/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      <FolderKanban className="h-5 w-5 text-white relative z-10" />
    </div>

    {/* Title and Description */}
    <div className="min-w-0 flex-1 overflow-hidden">
      <h3 className={`font-bold text-base sm:text-lg leading-tight line-clamp-2 transition-all duration-300 truncate
        ${isHovered ? 'text-white' : 'text-gray-100'}`}>
        {task.title}
      </h3>
      {task.description && (
        <p className={`mt-1 text-sm line-clamp-2 transition-colors duration-300 break-words
          ${isHovered ? 'text-gray-300' : 'text-gray-400'}`}>
          {task.description}
        </p>
      )}
    </div>
  </div>
);


const TaskCard: React.FC<TaskCardProps> = ({ task, index, onUpdateStatus, onDeleteTask, className = '' }) => {
  const [isHovered, setIsHovered] = useState(false);
  const [showActions, setShowActions] = useState(false);
  const { key: statusKey, label: statusLabel } = normalizeStatus(task.status_title || task.status);
  const statusTheme = STATUS_CONFIG[statusKey] || STATUS_CONFIG.default;
  const progress = task.progress || 0;
  const remainingDays = task.deadline ? Math.ceil((new Date(task.deadline).getTime() - new Date().getTime()) / (1000 * 60 * 60 * 24)) : null;

  const handleStatusUpdate = (status: string) => {
    onUpdateStatus(task.id, status);
  };

  const handleDelete = (e: React.MouseEvent) => {
    e.stopPropagation();
    if (window.confirm('Are you sure you want to delete this task?')) {
      onDeleteTask(task.id);
    }
  };

  const handleEdit = (e: React.MouseEvent) => {
    e.stopPropagation();
    // TODO: Implement edit functionality
  };

  return (
    <div 
      className={`relative group bg-gradient-to-br from-slate-800/80 to-slate-900/80 backdrop-blur-sm 
        rounded-2xl p-4 sm:p-5 border border-slate-700/50 transition-all duration-300 hover:shadow-xl 
        hover:border-slate-600/50 overflow-hidden hover:-translate-y-1 hover:shadow-indigo-500/10 
        cursor-pointer ${className}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => {
        setIsHovered(false);
        setShowActions(false);
      }}
      style={{
        animation: 'fadeIn 0.5s ease-out',
        animationFillMode: 'both',
        animationDelay: `${index * 30}ms`
      }}
    >
      {/* Background Effects */}
      <BackgroundEffects isHovered={isHovered} statusTheme={statusTheme} />
      
      {/* Status Badge */}
      <StatusBadge 
        statusKey={statusKey} 
        statusLabel={statusLabel} 
        statusTheme={statusTheme} 
        isHovered={isHovered} 
      />
      
      {/* Task Header */}
      <div className="relative z-10">
        <div className="flex items-start justify-between gap-3 mb-3">
          <div className="flex-1 min-w-0">
            <h3 className={`text-sm sm:text-base font-semibold mb-1 transition-colors duration-300 ${
              isHovered ? 'text-white' : 'text-gray-200'
            }`}>
              {task.title}
            </h3>
            {task.description && (
              <p className="text-xs text-gray-400 line-clamp-2">
                {task.description}
              </p>
            )}
          </div>
        </div>
        
        <div className="flex items-center justify-between mt-4 pt-3 border-t border-slate-700/50">
          <div className="flex items-center gap-2">
            <StatusDropdown
              statuses={[
                { id: 1, title: 'todo', description: 'Task is pending', color: '#6B7280', isDeletable: true },
                { id: 2, title: 'inProgress', description: 'Task is in progress', color: '#3B82F6', isDeletable: true },
                { id: 3, title: 'testing', description: 'Task is being tested', color: '#F59E0B', isDeletable: false },
                { id: 4, title: 'review', description: 'Task is in review', color: '#8B5CF6', isDeletable: true },
                { id: 5, title: 'completed', description: 'Task is completed', color: '#10B981', isDeletable: false }
              ]}
              selectedStatus={task.status_title || task.status || 'todo'}
              onStatusSelect={handleStatusUpdate}
              onStatusesChange={() => {}}
              entityType="task"
            />
          </div>
          
          <div className="flex items-center gap-2">
            {task.deadline && (
              <div className="flex items-center gap-1.5 text-xs text-amber-400 bg-amber-500/10 px-2 py-1 rounded-md">
                <Calendar className="h-3.5 w-3.5" />
                <span>{formatDeadlineText(task.deadline)}</span>
              </div>
            )}
            
            <button 
              onClick={handleDelete}
              className="p-1.5 rounded-lg text-gray-400 hover:text-red-400 hover:bg-red-500/10 transition-colors duration-200"
            >
              <Trash2 className="h-3.5 w-3.5" />
            </button>
          </div>
        </div>
      </div>
      
      <BorderGlowEffect isHovered={isHovered} />
    </div>
  );
}

export default TaskCard;

